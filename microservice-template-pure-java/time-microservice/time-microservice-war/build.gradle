import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.DockerRegistryCredentials

apply plugin: 'war'
apply plugin: 'com.bmuschko.docker-remote-api'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {

    compile project(':time-microservice-contract')
    compile project(':time-microservice-impl')
    compile project(':time-microservice-dao')
    compile project(':time-microservice-utils')
    
    compile "org.glassfish.jersey.containers:jersey-container-jetty-servlet:${jersey2Version}"
    compile "org.glassfish.jersey.containers:jersey-container-jetty-http:${jersey2Version}"
    compile "org.glassfish.jersey.containers:jersey-container-servlet:${jersey2Version}"
    compile "org.eclipse.jetty:jetty-webapp:${jetty94Version}"
    
}

gretty {
    httpPort = 8080
    contextPath = '/'
    servletContainer = 'jetty9.4'
}

task('bakeDocker') {
    doLast {
      exec {
          workingDir '.'
          commandLine "sh", "-c", "docker build -t ip-timems ."
      }
    }
}

task('runDocker') {
    doLast {
      exec {
          workingDir '.'
          commandLine "sh", "-c", "docker run --rm --name ip-timems -p 8080:8080 ip-timems"
      }
    }
}

task('stopDocker') {
    doLast {
      exec {
          workingDir '.'
          commandLine "sh", "-c", "docker stop ip-timems"
      }
    }
}

task('pushDockerImage') {
    doLast {
      exec {
          workingDir '.'
          commandLine "sh", "-c", "docker push diegopacheco/time-microservice"
      }
    }
}

docker {
    registryCredentials {
        username = 'diegopacheco'
        password = ''
        email = 'diego.pacheco.it@gmail.com'
    }
}

def dockerImageTAG = "diegopacheco/time-microservice"

task createDockerfile(type: Dockerfile, dependsOn: build)  {
    destFile = project.file('Dockerfile')
    from 'jetty:9.4.12-alpine'
    addFile("build/libs/"+project.name+"-"+version+".war", "/var/lib/jetty/webapps/root.war")
    exposePort(8080)
}

task buildImage(type: DockerBuildImage, dependsOn: createDockerfile) {
    inputDir = projectDir
    tags.add(dockerImageTAG)
}

task pushImage(type: DockerPushImage, dependsOn: buildImage) {
    imageName = dockerImageTAG
}